{
  "openapi": "3.0.0",
  "info": {
    "title": "geek_script",
    "description": "An API for a simple e-commerce shop themed around nerdy products. The final project of [Gama Academy](https://gama.academy/) webdevelopment course. Current version is still in development.\n\nUseful links:\n  - [Backend project repository](https://github.com/tiagospeckart/geekscript-backend)\n  - [Frontend project repository](https://github.com/GabrielGameDev/geek-script-front)",
    "contact": {
      "name": "API Support",
      "email": "tiagospeckart@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/license/mit/"
    },
    "version": "1.2.1"
  },
  "servers": [
    {
      "url": "https://geekscript-backend-production.up.railway.app",
      "description": "Railway deploy"
    },
    {
      "url": "http://localhost:5000",
      "description": "Localhost for Development"
    }
  ],
  "tags": [
    {
      "name": "Register",
      "description": "Create a Client account"
    },
    {
      "name": "Login",
      "description": "Log into the system with your account"
    },
    {
      "name": "User",
      "description": "Operations for Users"
    },
    {
      "name": "Product",
      "description": "Finding Products and adding them to the cart"
    },
    {
      "name": "Purchase",
      "description": "Buying Products and other Purchase operations"
    },
    {
      "name": "Category",
      "description": "Categories operations for Products"
    },
    {
      "name": "Discount",
      "description": "Discount coupons operations for Purchases"
    },
    {
      "name": "Admin",
      "description": "Admin endpoints"
    }
  ],
  "paths": {
    "/login": {
      "post": {
        "tags": [
          "Login"
        ],
        "summary": "Login into the system",
        "description": "Here all Users can submit their e-mail and password, and by doing so, the encrypted password is compared to the one stored in the DB. The return is a JWT encrypted token containing relevant User data.",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              },
              "example": {
                "email": "admin@admin.com",
                "password": "admin123"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Sucessful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZF91c2VyIjoxLCJuYW1lIjoiYWRtaW4iLCJlbWFpbCI6ImFkbWluQGFkbWluLmNvbSIsInNjb3BlIjoiYWRtaW4iLCJpYXQiOjE2NzgxNDM1OTksImV4cCI6MTY4MDczNTU5OX0.W4bI0RxLCQAGWzo0uQNwc9B0G5p6nWGbTwwAdTGnAqA"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Invalid e-mail or password, please try again"
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to generate a token"
              }
            }
          }
        }
      }
    },
    "/user/register": {
      "post": {
        "tags": [
          "Register",
          "User"
        ],
        "summary": "Creates a new User",
        "description": "By providing the required data fields, a new User account is made. Password is encrypted before being stored into the DB. The account has a Client scope by default, which can later be altered to Admin by another Administrator",
        "operationId": "registerUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "example": {
                "name": "Test Name",
                "email": "test@email.com",
                "password": "testpass123"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to register user"
              }
            }
          },
          "409": {
            "description": "Duplicated Entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "E-mail already registered"
              }
            }
          }
        }
      }
    },
    "/user/profile": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns current logged User data",
        "description": "A User profile page populated by acessing current logged User stored token.",
        "operationId": "getLoggedUser",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "id_user": 3,
                  "name": "Test Name",
                  "email": "test@email.com",
                  "password": "testpass123",
                  "isAdm": 0,
                  "createdAt": "2023-02-24T13:01:02.700Z",
                  "updatedAt": "2023-02-24T13:01:02.700Z"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/profile/purchases": {
      "get": {
        "tags": [
          "Purchase",
          "User"
        ],
        "summary": "Returns a list of Purchases made by logged User",
        "description": "A User purchases page populated by acessing current logged User stored token. Returns an array of past purchaces made.",
        "operationId": "getClientPurchases",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayPurchase"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to perform this action"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/profile/edit": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updates current logged User data",
        "description": "User can edit name, email, and password. For future implementation, it should restrict the capacity of Client Users to be able to update it's own id and scope.",
        "operationId": "updateLoggedUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "id_user": 3,
                  "name": "Tester Alter",
                  "email": "email@tester.com",
                  "password": "$2a$10$1Rih7rJk0iWrK0zK.Zfxwu7ADhZW5c1kWQMrEtHx.d4Jb/ekHUpuK",
                  "isAdm": 0,
                  "createdAt": "2023-02-24T13:01:02.700Z",
                  "updatedAt": "2023-02-24T13:01:02.700Z"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to update data"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/profile/delete": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes current logged User data",
        "description": "User can delete it's own account.",
        "operationId": "deleteLoggedUser",
        "responses": {
          "204": {
            "description": "Request recieved and understood, but no need to send data back"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          },
          "500": {
            "description": "Unable to delete data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to delete data"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/admin": {
      "get": {
        "tags": [
          "Admin",
          "User"
        ],
        "summary": "Returns a list of all Users",
        "description": "Administrators can access all existing Users in the system.",
        "operationId": "getAllUser",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayUser"
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to perform this action"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/admin/{id_user}": {
      "get": {
        "tags": [
          "User",
          "Admin"
        ],
        "summary": "Returns a User by ID",
        "description": "Returns all the data of a specific User.",
        "operationId": "getOneUser",
        "parameters": [
          {
            "name": "id_user",
            "in": "path",
            "description": "User ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "id_user": 3,
                  "name": "Test Name",
                  "email": "test@email.com",
                  "password": "testpass123",
                  "isAdm": 0,
                  "createdAt": "2023-02-24T13:01:02.700Z",
                  "updatedAt": "2023-02-24T13:01:02.700Z"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updates a User by ID",
        "description": "Administrators can adit all data fields of a User.",
        "operationId": "updateOneUser",
        "parameters": [
          {
            "name": "id_user",
            "in": "path",
            "description": "User ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "id_user": 3,
                  "name": "Tester Alter",
                  "email": "email@tester.com",
                  "password": "$2a$10$1Rih7rJk0iWrK0zK.Zfxwu7ADhZW5c1kWQMrEtHx.d4Jb/ekHUpuK",
                  "isAdm": 0,
                  "createdAt": "2023-02-24T13:01:02.700Z",
                  "updatedAt": "2023-02-24T13:01:02.700Z"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to update data"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a User by ID",
        "description": "Administrators can delete a specific User.",
        "operationId": "deleteOneUser",
        "parameters": [
          {
            "name": "id_user",
            "in": "path",
            "description": "User ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request recieved and understood, but no need to send data back"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          },
          "500": {
            "description": "Unable to delete data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to delete data"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/product/catalog/": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Returns a list of all Products with option to select by Category",
        "description": "Returns all products avaiable in the system. If a Category name is passed as an optional Query in the url, it returns only the list of the Products of this Category.",
        "operationId": "getProducts",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "Valid Category name as query parameter to select Products of this Category",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayProduct"
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to perform this action"
              }
            }
          }
        }
      }
    },
    "/product/{id_product}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Returns a Product by ID",
        "description": "Returns a single Product object containing all of it's information",
        "operationId": "getOneProduct",
        "parameters": [
          {
            "name": "id_product",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to perform this action"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/product/admin": {
      "post": {
        "tags": [
          "Product",
          "Admin"
        ],
        "summary": "Creates a new Product",
        "description": "Creates a new Product. Requires a valid Category Id number.",
        "operationId": "createProduct",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "example": {
                "name": "string",
                "photo": "string",
                "price": 34.12,
                "description": "string",
                "category_id": 1
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to register product"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/product/admin/{id_product}": {
      "put": {
        "tags": [
          "Product",
          "Admin"
        ],
        "summary": "Updates a Product",
        "description": "Updates the data fields of a specific existing Product.",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "id_product",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              },
              "example": {
                "price": 390.12
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to update data"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Product",
          "Admin"
        ],
        "summary": "Deletes a Product",
        "description": "Deletes a single Product.",
        "operationId": "deleteProduct",
        "parameters": [
          {
            "name": "id_product",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request recieved and understood, but no need to send data back"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          },
          "500": {
            "description": "Unable to delete data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to delete data"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/checkout": {
      "post": {
        "tags": [
          "Purchase"
        ],
        "summary": "Insert into system a new purchase",
        "description": "This is where purchases are confirmed. While browsing the website, User can add Products to their shopping cart. At the /checkout page, all products selected at the current session are displayed, toghether with the order total value (a sum of each item's value). When the Purchase is cofirmed, the Frontend sends a list of products Ids (as puchaseIdList) and a total purchase value. Optionally, a discount coupon name can be submitted, subtracting the order total value.",
        "operationId": "checkout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Checkout"
              },
              "example": {
                "purchaseTotal": 458.23,
                "purchaseIdList": [
                  1,
                  2
                ],
                "discountName": "coupon15"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          },
          "400": {
            "description": "Unable to complete the purchase",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to complete the purchase"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/purchase/admin": {
      "get": {
        "tags": [
          "Purchase",
          "Admin"
        ],
        "summary": "Returns an array of Purchases",
        "description": "Administrators can see a list of all Purchases made in the system.",
        "operationId": "getAllPurchases",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayPurchase"
                },
                "example": [
                  {
                    "id_purchase": 1,
                    "user_id": 1,
                    "total": "393.73",
                    "createdAt": "2023-02-27T21:29:52.000Z",
                    "updatedAt": "2023-02-27T21:29:52.000Z",
                    "User": {
                      "id_user": 1,
                      "name": "admin"
                    }
                  },
                  {
                    "id_purchase": 2,
                    "user_id": 2,
                    "total": "558.85",
                    "createdAt": "2023-02-27T21:29:52.000Z",
                    "updatedAt": "2023-02-27T21:29:52.000Z",
                    "User": {
                      "id_user": 2,
                      "name": "Cliente Teste"
                    }
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to perform this action"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/purchase/admin/{id_purchase}": {
      "put": {
        "tags": [
          "Purchase",
          "Admin"
        ],
        "summary": "Updates a Purchase",
        "description": "Administrators can alter de data of a single Purchase.",
        "operationId": "updatePurchase",
        "parameters": [
          {
            "name": "id_purchase",
            "in": "path",
            "description": "Purchase ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Purchase"
              },
              "example": {
                "total": 390.12
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Purchase"
                },
                "example": {
                  "id_purchase": 1,
                  "user_id": 1,
                  "total": "393.73",
                  "createdAt": "2023-02-27T21:29:52.000Z",
                  "updatedAt": "2023-02-27T21:29:52.000Z",
                  "User": {
                    "id_user": 1,
                    "name": "admin"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to update data"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Purchase",
          "Admin"
        ],
        "summary": "Deletes a Purchase",
        "description": "Administrators can delete a single Purchase.",
        "operationId": "deletePurchase",
        "parameters": [
          {
            "name": "id_purchase",
            "in": "path",
            "description": "Purchase ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request recieved and understood, but no need to send data back"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          },
          "500": {
            "description": "Unable to delete data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to delete data"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/category/catalog": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Returns a list of all Categories",
        "description": "Displays all Categories avaiable at the store.",
        "operationId": "getAllCategory",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayCategory"
                },
                "example": [
                  {
                    "id_category": 1,
                    "name": "Vestuário",
                    "createdAt": "2023-02-24T13:01:02.700Z",
                    "updatedAt": "2023-02-24T13:01:02.700Z"
                  },
                  {
                    "id_category": 2,
                    "name": "Games",
                    "createdAt": "2023-02-24T13:01:02.700Z",
                    "updatedAt": "2023-02-24T13:01:02.700Z"
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to perform this action"
              }
            }
          }
        }
      }
    },
    "/category/{id_category}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Returns a Category by ID",
        "operationId": "getOneCategory",
        "parameters": [
          {
            "name": "id_category",
            "in": "path",
            "description": "Category ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                },
                "example": {
                  "id_category": 1,
                  "name": "Jogos de Tabuleiro",
                  "createdAt": "2023-02-24T13:01:02.700Z",
                  "updatedAt": "2023-02-24T13:01:02.700Z"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          }
        }
      }
    },
    "/category/admin": {
      "post": {
        "tags": [
          "Category",
          "Admin"
        ],
        "summary": "Creates a new Category",
        "description": "Creates a new Category into the system.",
        "operationId": "createCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              },
              "example": {
                "name": "Board Game"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                },
                "example": {
                  "id_category": 3,
                  "name": "Board Game",
                  "createdAt": "2023-02-24T13:01:02.700Z",
                  "updatedAt": "2023-02-24T13:01:02.700Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to register category"
              }
            }
          },
          "409": {
            "description": "Category already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Category already exists"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/category/admin/{id_category}": {
      "put": {
        "tags": [
          "Category",
          "Admin"
        ],
        "summary": "Updates a Category by ID",
        "description": "Updates a currently existing Category.",
        "operationId": "updateCategory",
        "parameters": [
          {
            "name": "id_category",
            "in": "path",
            "description": "Category ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              },
              "example": {
                "name": "Board Game"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to update data"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Category",
          "Admin"
        ],
        "summary": "Deletes a Category by ID",
        "description": "Deletes an existing Category.",
        "operationId": "removeCategory",
        "parameters": [
          {
            "name": "id_category",
            "in": "path",
            "description": "Category ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Request recieved and understood, but no need to send data back"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          },
          "500": {
            "description": "Unable to delete data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to delete data"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/discount/admin/": {
      "get": {
        "tags": [
          "Discount",
          "Admin"
        ],
        "summary": "Returns a list of all Discounts",
        "description": "Administrators can access a list of all existing Discount coupons.",
        "operationId": "getAllDiscounts",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArrayDiscount"
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to perform this action"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Discount",
          "Admin"
        ],
        "summary": "Creates a new Discount",
        "description": "Administrators can create a new Discount coupon.",
        "operationId": "createDiscount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Discount"
              },
              "example": {
                "name": "coupon15",
                "value": 15
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Discount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to register discount"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/discount/admin/{id_discount}": {
      "get": {
        "tags": [
          "Discount",
          "Admin"
        ],
        "summary": "Returns a Discount by ID",
        "description": "Administrators can acess the data of a specific Discount coupon.",
        "operationId": "getOneDiscount",
        "parameters": [
          {
            "name": "id_discount",
            "in": "path",
            "description": "Discount ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Discount"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Discount",
          "Admin"
        ],
        "summary": "Updates a Discount by ID",
        "description": "Administrators can create a new Discount coupon.",
        "operationId": "updateDiscount",
        "parameters": [
          {
            "name": "id_discount",
            "in": "path",
            "description": "Discount ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Discount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Discount"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to update data"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Discount",
          "Admin"
        ],
        "summary": "Deletes a Discount by ID",
        "description": "Administrators can delete a specific Discount coupon.",
        "operationId": "removeDiscount",
        "parameters": [
          {
            "name": "id_discount",
            "in": "path",
            "description": "Discount ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Request recieved and understood, but no need to send data back"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "ID not found"
              }
            }
          },
          "500": {
            "description": "Unable to delete data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "Unable to delete data"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "required": [
          "email",
          "name",
          "password"
        ],
        "type": "object",
        "properties": {
          "id_user": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          },
          "scope": {
            "type": "string",
            "example": "client"
          }
        }
      },
      "Login": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        }
      },
      "Category": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id_category": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Product": {
        "required": [
          "category_id",
          "description",
          "name",
          "photo",
          "price"
        ],
        "type": "object",
        "properties": {
          "id_product": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "photo": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "float"
          },
          "description": {
            "type": "string"
          },
          "category_id": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Purchase": {
        "required": [
          "total",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "id_purchase": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "user_id": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "discount_id": {
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "total": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "Discount": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "id_discount": {
            "minimum": 1,
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "number"
          }
        }
      },
      "Checkout": {
        "required": [
          "purchaseIdList",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "format": "integer"
          },
          "purchaseIdList": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "discount_id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ArrayUser": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/User"
        }
      },
      "ArrayCategory": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Category"
        }
      },
      "ArrayProduct": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Product"
        }
      },
      "ArrayPurchase": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Purchase"
        }
      },
      "ArrayDiscount": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Discount"
        }
      },
      "Error": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      }
    },
    "responses": {
      "DeleteError": {
        "description": "Unable to delete data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": "Unable to delete data"
          }
        }
      },
      "DeleteSuccess": {
        "description": "Request recieved and understood, but no need to send data back"
      },
      "CheckoutReg": {
        "description": "Failed to create new purchase",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": "Failed to create new purchase"
          }
        }
      },
      "CheckoutError": {
        "description": "Unable to complete the purchase",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": "Unable to complete the purchase"
          }
        }
      },
      "ExistCategory": {
        "description": "Category already exists",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": "Category already exists"
          }
        }
      },
      "ExistEmail": {
        "description": "Duplicated Entry",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": "E-mail already registered"
          }
        }
      },
      "IdNotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": "ID not found"
          }
        }
      },
      "InvalidData": {
        "description": "Unauthorised",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": "Invalid e-mail or password, please try again"
          }
        }
      },
      "RegisterCategory": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": "Unable to register category"
          }
        }
      },
      "RegisterProduct": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": "Unable to register product"
          }
        }
      },
      "RegisterUser": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": "Unable to register user"
          }
        }
      },
      "RegisterPurchase": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": "Unable to register purchase"
          }
        }
      },
      "RegisterDiscount": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": "Unable to register discount"
          }
        }
      },
      "SearchDb": {
        "description": "Server side error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": "Unable to perform this action"
          }
        }
      },
      "Token": {
        "description": "Server side error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": "Unable to generate a token"
          }
        }
      },
      "UpdateRegister": {
        "description": "Server side error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": "Unable to update data"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}